name: Build, Test, and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: npm install

      - name: Build and Test Docker Image
        run: |
            # Build Docker image
            docker build -t crwebappprodwe.azurecr.io/more_frontend:latest .

            # Run Docker container, map to port 3000, and perform tests
            docker run -d -p 3000:3000 --name test-container crwebappprodwe.azurecr.io/more_frontend:latest
            sleep 5 # Wait for container to start

            # Perform tests (replace with your actual test command)
            http_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
            html_content=$(curl -s http://localhost:3000)

            # Check if HTTP status is 200 and HTML content contains specific tags using regex
            if [ "$http_status" -eq 200 ]; then
              echo "Tests passed!"
            else
              echo "Tests failed. Exiting..."
              docker stop test-container
              docker rm test-container
              exit 1
            fi

            # Stop and remove the test container
            docker stop test-container
            docker rm test-container

      - name: Build Docker Image 
        run: |
          docker build -t crwebappprodwe.azurecr.io/more_frontend:latest .
          echo ${{ secrets.ACR_PASSWORD }} | docker login crwebappprodwe.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin
          docker push crwebappprodwe.azurecr.io/more_frontend:latest
  

  deploy:
    permissions:
      issues: write
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: crwebappprodwe.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Terraform Init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }} 
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          IMAGE_NAME: "crwebappprodwe.azurecr.io/more_frontend:latest"       

      - name: Terraform Plan
        run: terraform plan -var "image_name=${{ env.IMAGE_NAME }}" -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          IMAGE_NAME: "crwebappprodwe.azurecr.io/more_frontend:latest"

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: alakaza2022
          minimum-approvals: 1
          issue-title: "More Frontend Deployment Approval"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ''
          additional-denied-words: ''

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          IMAGE_NAME: "crwebappprodwe.azurecr.io/more_frontend:latest"
          STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
          STORAGE_ACCOUNT_KEY: ${{ secrets.STORAGE_ACCOUNT_KEY }}
